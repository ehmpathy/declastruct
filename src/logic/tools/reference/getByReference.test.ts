import { DomainObject } from 'domain-objects';
import { LogMethods } from 'simple-leveled-log-methods';
import { VisualogicContext } from 'visualogic';

import { DeclaredResourceReference } from '../../../domain/DeclaredResourceReference';
import { DeclastructContext } from '../../../domain/DeclastructContext';
import { DeclastructProvider } from '../../../domain/DeclastructProvider';
import { DeclastructProviderResourceRemoteStateInterface } from '../../../domain/DeclastructProviderResourceRemoteStateInterface';
import { buildRef } from './buildReferenceTo';
import { getByReference } from './getByReference';
import { getRef } from './getReferenceTo';

const log = console;

interface CNCMachine {
  uuid?: string;
  serialNumber: string;
  size: string;
  location: string;
}
class CNCMachine extends DomainObject<CNCMachine> implements CNCMachine {
  public static primary = ['uuid'];
  public static unique = ['serialNumber'];
}
type CNCMachineReference = DeclaredResourceReference<
  CNCMachine,
  'uuid',
  'serialNumber'
>;

const exampleMachine = new CNCMachine({
  uuid: 'de0e34ca-ce61-4884-ace5-093a1a32ff92',
  serialNumber: '821',
  size: 'big',
  location: 'basement',
}) as Required<CNCMachine>;

const cncMachineRemoteStateInterface: DeclastructProviderResourceRemoteStateInterface<
  CNCMachine,
  // eslint-disable-next-line @typescript-eslint/ban-types
  { log: LogMethods },
  'uuid',
  'serialNumber'
> = {
  for: CNCMachine.name,
  findByPrimary: async ({ uuid }) => {
    if (uuid === exampleMachine.uuid) return exampleMachine;
    return null;
  },
  findByUnique: async ({ serialNumber }) => {
    if (serialNumber === exampleMachine.serialNumber) return exampleMachine;
    return null;
  },
  create: () => Promise.reject(new Error('todo')),
  destroy: () => Promise.reject(new Error('todo')),
};

const exampleContext: DeclastructContext & VisualogicContext = {
  log,
  providers: [
    {
      agentOptions: {},
      interfaces: {
        [cncMachineRemoteStateInterface.for]: cncMachineRemoteStateInterface,
      } as any as DeclastructProvider<any>['interfaces'], // TODO: fix types to make this assertion not needed
      hooks: {},
    },
  ],
  resources: [], // no resources needed in context for this test
};

// todo: remove the declastruct references in favor of domain-object references
describe.skip('getByReference', () => {
  it('should be able to find by autogenerated reference', async () => {
    const autogeneratedReference: CNCMachineReference = getRef(exampleMachine);
    const resource = await getByReference(
      {
        reference: autogeneratedReference,
      },
      exampleContext,
    );
    expect(resource).toBeInstanceOf(CNCMachine);
  });
  it('should be able to find by manually built primary key reference', async () => {
    const primaryKeyReference: CNCMachineReference = buildRef(CNCMachine, {
      uuid: exampleMachine.uuid,
    });
    const resource = await getByReference(
      {
        reference: primaryKeyReference,
      },
      exampleContext,
    );
    expect(resource).toBeInstanceOf(CNCMachine);
  });
  it('should be able to find by manually built unique key reference', async () => {
    const uniqueKeyReference: CNCMachineReference = buildRef(CNCMachine, {
      serialNumber: exampleMachine.serialNumber,
    });
    const resource = await getByReference(
      {
        reference: uniqueKeyReference,
      },
      exampleContext,
    );
    expect(resource).toBeInstanceOf(CNCMachine);
  });
  it('should return null if the resource does not exist in remote state by primary key', async () => {
    const primaryKeyReference: CNCMachineReference = buildRef(CNCMachine, {
      uuid: '__RANDO_UUID__',
    });
    const resource = await getByReference(
      {
        reference: primaryKeyReference,
      },
      exampleContext,
    );
    expect(resource).toEqual(null);
  });
  it('should return null if the resource does not exist in remote state by unique key', async () => {
    const uniqueKeyReference: CNCMachineReference = buildRef(CNCMachine, {
      serialNumber: '__RANDO_SERIAL_NUMBER__',
    });
    const resource = await getByReference(
      {
        reference: uniqueKeyReference,
      },
      exampleContext,
    );
    expect(resource).toEqual(null);
  });
});
